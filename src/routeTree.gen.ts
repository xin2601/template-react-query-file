/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestLayoutRouteImport } from './routes/_test-layout'
import { Route as DefaultLayoutRouteImport } from './routes/_default-layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestLayoutTestPostsRouteImport } from './routes/_test-layout/test-posts'
import { Route as TestLayoutTestHomeRouteImport } from './routes/_test-layout/test-home'
import { Route as TestLayoutTestRouteImport } from './routes/_test-layout/test'
import { Route as TestLayoutPostsRouteImport } from './routes/_test-layout/posts'
import { Route as DefaultLayoutHomeRouteImport } from './routes/_default-layout/home'

const TestLayoutRoute = TestLayoutRouteImport.update({
  id: '/_test-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const DefaultLayoutRoute = DefaultLayoutRouteImport.update({
  id: '/_default-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestLayoutTestPostsRoute = TestLayoutTestPostsRouteImport.update({
  id: '/test-posts',
  path: '/test-posts',
  getParentRoute: () => TestLayoutRoute,
} as any)
const TestLayoutTestHomeRoute = TestLayoutTestHomeRouteImport.update({
  id: '/test-home',
  path: '/test-home',
  getParentRoute: () => TestLayoutRoute,
} as any)
const TestLayoutTestRoute = TestLayoutTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => TestLayoutRoute,
} as any)
const TestLayoutPostsRoute = TestLayoutPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => TestLayoutRoute,
} as any)
const DefaultLayoutHomeRoute = DefaultLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DefaultLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof DefaultLayoutHomeRoute
  '/posts': typeof TestLayoutPostsRoute
  '/test': typeof TestLayoutTestRoute
  '/test-home': typeof TestLayoutTestHomeRoute
  '/test-posts': typeof TestLayoutTestPostsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof DefaultLayoutHomeRoute
  '/posts': typeof TestLayoutPostsRoute
  '/test': typeof TestLayoutTestRoute
  '/test-home': typeof TestLayoutTestHomeRoute
  '/test-posts': typeof TestLayoutTestPostsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_default-layout': typeof DefaultLayoutRouteWithChildren
  '/_test-layout': typeof TestLayoutRouteWithChildren
  '/_default-layout/home': typeof DefaultLayoutHomeRoute
  '/_test-layout/posts': typeof TestLayoutPostsRoute
  '/_test-layout/test': typeof TestLayoutTestRoute
  '/_test-layout/test-home': typeof TestLayoutTestHomeRoute
  '/_test-layout/test-posts': typeof TestLayoutTestPostsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/home' | '/posts' | '/test' | '/test-home' | '/test-posts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/posts' | '/test' | '/test-home' | '/test-posts'
  id:
    | '__root__'
    | '/'
    | '/_default-layout'
    | '/_test-layout'
    | '/_default-layout/home'
    | '/_test-layout/posts'
    | '/_test-layout/test'
    | '/_test-layout/test-home'
    | '/_test-layout/test-posts'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DefaultLayoutRoute: typeof DefaultLayoutRouteWithChildren
  TestLayoutRoute: typeof TestLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_test-layout': {
      id: '/_test-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof TestLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_default-layout': {
      id: '/_default-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DefaultLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_test-layout/test-posts': {
      id: '/_test-layout/test-posts'
      path: '/test-posts'
      fullPath: '/test-posts'
      preLoaderRoute: typeof TestLayoutTestPostsRouteImport
      parentRoute: typeof TestLayoutRoute
    }
    '/_test-layout/test-home': {
      id: '/_test-layout/test-home'
      path: '/test-home'
      fullPath: '/test-home'
      preLoaderRoute: typeof TestLayoutTestHomeRouteImport
      parentRoute: typeof TestLayoutRoute
    }
    '/_test-layout/test': {
      id: '/_test-layout/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLayoutTestRouteImport
      parentRoute: typeof TestLayoutRoute
    }
    '/_test-layout/posts': {
      id: '/_test-layout/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof TestLayoutPostsRouteImport
      parentRoute: typeof TestLayoutRoute
    }
    '/_default-layout/home': {
      id: '/_default-layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof DefaultLayoutHomeRouteImport
      parentRoute: typeof DefaultLayoutRoute
    }
  }
}

interface DefaultLayoutRouteChildren {
  DefaultLayoutHomeRoute: typeof DefaultLayoutHomeRoute
}

const DefaultLayoutRouteChildren: DefaultLayoutRouteChildren = {
  DefaultLayoutHomeRoute: DefaultLayoutHomeRoute,
}

const DefaultLayoutRouteWithChildren = DefaultLayoutRoute._addFileChildren(
  DefaultLayoutRouteChildren,
)

interface TestLayoutRouteChildren {
  TestLayoutPostsRoute: typeof TestLayoutPostsRoute
  TestLayoutTestRoute: typeof TestLayoutTestRoute
  TestLayoutTestHomeRoute: typeof TestLayoutTestHomeRoute
  TestLayoutTestPostsRoute: typeof TestLayoutTestPostsRoute
}

const TestLayoutRouteChildren: TestLayoutRouteChildren = {
  TestLayoutPostsRoute: TestLayoutPostsRoute,
  TestLayoutTestRoute: TestLayoutTestRoute,
  TestLayoutTestHomeRoute: TestLayoutTestHomeRoute,
  TestLayoutTestPostsRoute: TestLayoutTestPostsRoute,
}

const TestLayoutRouteWithChildren = TestLayoutRoute._addFileChildren(
  TestLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DefaultLayoutRoute: DefaultLayoutRouteWithChildren,
  TestLayoutRoute: TestLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
